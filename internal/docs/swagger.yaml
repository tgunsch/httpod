definitions:
  cookies.GetCookies:
    properties:
      domain:
        type: string
      expires:
        $ref: '#/definitions/cookies.JSONTime'
      httpOnly:
        type: boolean
      maxAge:
        type: integer
      name:
        type: string
      path:
        type: string
      rawExpires:
        type: string
      sameSite:
        type: string
      secure:
        type: boolean
      value:
        type: string
    type: object
  cookies.JSONTime:
    properties:
      time.Time:
        type: string
    type: object
  cookies.SetCookie:
    properties:
      expiresSeconds:
        example: 3600
        type: integer
      httpOnly:
        example: true
        type: boolean
      maxAge:
        example: 0
        type: integer
      path:
        example: /
        type: string
      sameSite:
        example: Strict
        type: string
      secure:
        example: true
        type: boolean
      value:
        example: Test
        type: string
    type: object
  http.Response:
    properties:
      args:
        additionalProperties:
          type: string
        type: object
      headers:
        additionalProperties:
          type: string
        type: object
      host:
        type: string
      remote-address:
        type: string
      url:
        type: string
    type: object
  jwt.Response:
    properties:
      header:
        additionalProperties: true
        type: object
      payload:
        additionalProperties: true
        type: object
      raw:
        type: string
      valid:
        type: boolean
      verifiedSignature:
        type: boolean
    type: object
info:
  contact: {}
  description: A simple HTTP Request & HTTPResponse Service, shamelessly stolen from
    httpbin.org.
  title: httPod
  version: 1.0.0
paths:
  /cookies:
    get:
      consumes:
      - application/json
      description: Requests using GET should only retrieve data.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/cookies.GetCookies'
            type: array
      summary: Get all cookies of the request.
      tags:
      - Cookies
  /cookies/{cookieName}:
    delete:
      consumes:
      - application/json
      description: Delete a specific cookie.
      parameters:
      - description: The name of the cookie to delete
        in: path
        name: cookieName
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cookies.GetCookies'
      summary: Delete a cookie.
      tags:
      - Cookies
    post:
      consumes:
      - application/json
      parameters:
      - description: The name of the new cookie
        in: path
        name: cookieName
        type: string
      - description: The cookie
        in: body
        name: cookie
        required: true
        schema:
          $ref: '#/definitions/cookies.SetCookie'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/cookies.GetCookies'
      summary: Create a new cookie.
      tags:
      - Cookies
  /delete:
    delete:
      consumes:
      - application/json
      description: The DELETE method deletes the specified resource.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
      summary: Do a DELETE request.
      tags:
      - HTTP Methods
  /get:
    get:
      consumes:
      - application/json
      description: Requests using GET should only retrieve data.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
      summary: Do a GET request.
      tags:
      - HTTP Methods
  /jwt:
    get:
      consumes:
      - application/json
      description: Requests using GET should only retrieve data.
      parameters:
      - description: if set, JWT is read from this header name. Otherwise from Authorization
          header
        in: query
        name: headerName
        type: string
      - description: if set, the jwt is verified with the key received from jwks endpoint
        in: query
        name: jwksUri
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/jwt.Response'
            type: array
      summary: Get jwt passed as header. By default from Authorization bearer header
        of the request.
      tags:
      - JWT
  /patch:
    patch:
      consumes:
      - application/json
      description: The PATCH method is used to apply partial modifications to a resource.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
      summary: Do a PATCH request.
      tags:
      - HTTP Methods
  /post:
    post:
      consumes:
      - application/json
      description: The POST method is used to submit an entity to the specified resource,
        often causing a change in state or side effects on the server.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
      summary: Do a POST request.
      tags:
      - HTTP Methods
  /proxy:
    get:
      consumes:
      - application/json
      description: Query httpod as reverse proxy to uri.
      parameters:
      - description: 'Full URI to use for the backend request. Mandatory. e.g. https://example.org/path '
        in: header
        name: uri
        type: string
      - description: Method to use for the backend request. Optional, defaults to
          'GET'.
        in: header
        name: method
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
        "500":
          description: Internal Server Error
      summary: Do a GET request.
      tags:
      - Proxy Methods
  /put:
    put:
      consumes:
      - application/json
      description: The PUT method replaces all current representations of the target
        resource with the request payload.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/http.Response'
      summary: Do PUT request.
      tags:
      - HTTP Methods
  /status/{code}:
    delete:
      consumes:
      - application/json
      description: The DELETE method deletes the specified resource.
      parameters:
      - description: return status code
        in: path
        name: code
        type: string
      produces:
      - application/json
      responses:
        "100":
          description: Informational responses
          schema:
            type: string
        "200":
          description: Success
          schema:
            type: string
        "300":
          description: Redirection
          schema:
            type: string
        "400":
          description: Client Errors
          schema:
            type: string
        "418":
          description: I'm a teapot
          schema:
            type: string
        "500":
          description: Server Errors
          schema:
            type: string
      summary: Do a DELETE request.
      tags:
      - Status codes
    get:
      consumes:
      - application/json
      description: Requests using GET should only retrieve data.
      parameters:
      - description: return status code
        in: path
        name: code
        type: string
      produces:
      - application/json
      responses:
        "100":
          description: Informational responses
          schema:
            type: string
        "200":
          description: Success
          schema:
            type: string
        "300":
          description: Redirection
          schema:
            type: string
        "400":
          description: Client Errors
          schema:
            type: string
        "418":
          description: I'm a teapot
          schema:
            type: string
        "500":
          description: Server Errors
          schema:
            type: string
      summary: Do a GET request.
      tags:
      - Status codes
    patch:
      consumes:
      - application/json
      description: The PATCH method is used to apply partial modifications to a resource.
      parameters:
      - description: return status code
        in: path
        name: code
        type: string
      produces:
      - application/json
      responses:
        "100":
          description: Informational responses
          schema:
            type: string
        "200":
          description: Success
          schema:
            type: string
        "300":
          description: Redirection
          schema:
            type: string
        "400":
          description: Client Errors
          schema:
            type: string
        "418":
          description: I'm a teapot
          schema:
            type: string
        "500":
          description: Server Errors
          schema:
            type: string
      summary: Do a PATCH request.
      tags:
      - Status codes
    post:
      consumes:
      - application/json
      description: The POST method is used to submit an entity to the specified resource,
        often causing a change in state or side effects on the server.
      parameters:
      - description: return status code
        in: path
        name: code
        type: string
      produces:
      - application/json
      responses:
        "100":
          description: Informational responses
          schema:
            type: string
        "200":
          description: Success
          schema:
            type: string
        "300":
          description: Redirection
          schema:
            type: string
        "400":
          description: Client Errors
          schema:
            type: string
        "418":
          description: I'm a teapot
          schema:
            type: string
        "500":
          description: Server Errors
          schema:
            type: string
      summary: Do a POST request.
      tags:
      - Status codes
    put:
      consumes:
      - application/json
      description: The PUT method replaces all current representations of the target
        resource with the request payload.
      parameters:
      - description: return status code
        in: path
        name: code
        type: string
      produces:
      - application/json
      responses:
        "100":
          description: Informational responses
          schema:
            type: string
        "200":
          description: Success
          schema:
            type: string
        "300":
          description: Redirection
          schema:
            type: string
        "400":
          description: Client Errors
          schema:
            type: string
        "418":
          description: I'm a teapot
          schema:
            type: string
        "500":
          description: Server Errors
          schema:
            type: string
      summary: Do PUT request.
      tags:
      - Status codes
swagger: "2.0"
tags:
- description: Testing different HTTP methods
  name: HTTP Methods
- description: Generates responses with given status code
  name: Status codes
- description: Creates, reads and deletes Cookies
  name: Cookies
